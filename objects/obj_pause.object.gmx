<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sel=0
vol=0.5

dist = 10

if (global.os==os_android) {
    dist = 15
}

gamepad_set_axis_deadzone(0,0.7)

resume = load_string_json(global.language, "menu_resume")
resolution = load_string_json(global.language, "menu_res")
snd = load_string_json(global.language, "menu_snd")
bk = load_string_json(global.language, "menu_bk_home")

if (global.zoom&lt;6) {
    zm = string(global.zoom)
} else {
    zm = "FullScreen"
}

if (global.os==os_windows) {
    menu_array[0]=resume
    menu_array[1]=resolution + zm
    menu_array[2]=snd + string(round(vol*10))
    menu_array[3]=bk
}

if (global.os==os_android) {
    menu_array[0]=resume
    menu_array[1]=snd + string(round(vol*10))
    menu_array[2]=bk
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resume = load_string_json(global.language, "menu_resume")
resolution = load_string_json(global.language, "menu_res")
snd = load_string_json(global.language, "menu_snd")
bk = load_string_json(global.language, "menu_bk_home")

if (global.zoom&lt;6) {
    zm = string(global.zoom)
} else {
    zm = "FullScreen"
}

kDownRel     = keyboard_check_released(vk_down) || gamepad_button_check_released(0,gp_padd)
kUpRel       = keyboard_check_released(vk_up) || gamepad_button_check_released(0,gp_padu)
kEnterRel    = keyboard_check_released(vk_enter) || keyboard_check_released(ord("Z")) || gamepad_button_check_released(0,gp_face1);

if (kDownRel &amp;&amp; sel&lt;array_length_1d(menu_array)-1) {
    sel+=1;
    audio_play_sound(snd_menu_mov, 10, false);
}

if (kUpRel &amp;&amp; sel&gt;0) {
    sel-=1;
    audio_play_sound(snd_menu_mov, 10, false);
}


if (global.os==os_windows) {
    menu_array[0]=resume
    menu_array[1]=resolution + zm
    menu_array[2]=snd + string(round(vol*10))
    menu_array[3]=bk
    
    if (kEnterRel) {
     switch (sel)
        {
        case 0:
          instance_activate_all()
          audio_play_sound(snd_sel, 10, false);
          instance_destroy()
          break;
        case 1:
          change_res()
          audio_play_sound(snd_sel, 10, false);
          break;
        case 2:
          if vol &lt; 1 { 
            vol += 0.1;
          } else {
            vol=0
          }
          audio_master_gain(vol);
          audio_play_sound(snd_sel, 10, false);
          break;
        case 3:
          room_goto(rm_menu)
          audio_play_sound(snd_sel, 10, false);
          break;
        }
    }
}

if (global.os==os_android) {
    menu_array[0]=resume
    menu_array[1]=snd + string(round(vol*10))
    menu_array[2]=bk
    
    if (kEnterRel) {
     switch (sel)
        {
        case 0:
          instance_activate_all()
          audio_play_sound(snd_sel, 10, false);
          instance_destroy()
          break;
        case 1:
          if vol &lt; 1 { 
            vol += 0.1;
          } else {
            vol=0
          }
          audio_master_gain(vol);
          audio_play_sound(snd_sel, 10, false);
          break;
        case 2:
          room_goto(rm_menu)
          audio_play_sound(snd_sel, 10, false);
          break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_font(fnt_8bit)

for (var i=0; i&lt;array_length_1d(menu_array); i++) {
    if (sel==i) {
        col = c_black
        back_sel = c_white
    } else {
        col = c_white
        back_sel = c_black
    }
    
    draw_rectangle_colour(20, room_height/2.5 + i*dist -4, 108, room_height/2.5 + i*dist + 4, back_sel, back_sel, back_sel, back_sel, false); 
    
    draw_set_colour(col)
    
    draw_text_transformed(room_width/2, room_height/2.5 + i*dist, menu_array[i], 0.25, 0.25, 0);
    
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
