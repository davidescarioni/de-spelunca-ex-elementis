<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mage</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>obj_parent_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mul = 0.1

grav = 1*mul;
spd = 4*mul;
jspd = 13*mul;
hspd = 0*mul;
vspd = 0*mul;
fric = 0.5*mul;
move = true;

rock=false;
djump = 2;
dir = 1

onGround = OnGround();

alpha=1

draw_xscale=1
draw_yscale=1

index_img=0

gamepad_set_axis_deadzone(0,0.7)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(global.checkpoint);
move=true
hspd = 0*mul;
vspd = 0*mul;
fric = 0.5*mul;
x=global.checkpoint_x;
y=global.checkpoint_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onGround = OnGround();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Input //////////////////////////////////////////////////////////////////////
//var kLeft, kRight, kJump
kLeft        = keyboard_check(vk_left) ||  gamepad_button_check(0,gp_padl)
kRight       = keyboard_check(vk_right) ||  gamepad_button_check(0,gp_padr)
kDown        = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(0,gp_padd)
kDownRel     = keyboard_check_released(vk_down) || gamepad_button_check_released(0,gp_padd);
//kDownGP      = gamepad_axis_value(0,gp_axislv) &gt; 0
//kDownGPRel   = gamepad_axis_value(0,gp_axislv) = 0
kJump        = keyboard_check_pressed(ord("Z")) || (gamepad_button_check_pressed(0,gp_face1));
kShoot       = keyboard_check_pressed(ord("X")) || (gamepad_button_check_pressed(0,gp_face3));

// Movement ///////////////////////////////////////////////////////////////////

// Apply the correct form of acceleration and friction
if (onGround) {
    vspd = 0;
    djump=2;
} else {
    if (vspd &lt; 10) {
        vspd += grav;
    }
}

if (kDown &amp;&amp; global.rock==true) {
    rock=true;
}


if (kDownRel) {
    rock=false;
}

if (global.animate==false) {
    draw_yscale=1
    draw_xscale=1
}


if(kJump &amp;&amp; djump&gt;0 &amp;&amp; move) {
    vspd = -jspd;
    if (global.air==true) {
        djump -= 1;
    } else {
        djump = 0;
    }
    if (global.switch_green==true) {
        global.switch_green=false
    } else {
        global.switch_green=true
    }
    if (global.sound==true) {
        audio_play_sound(snd_jump, 10, false);
    }
    if (global.animate==true) {
        draw_yscale=1.15
        draw_xscale=.85
    }
}

if (kRight &amp;&amp; move) {
    dir = 1;
    if (hspd &lt; spd){
        hspd += fric;
    } else {
        hspd = spd;
    }
}

if (kLeft &amp;&amp; move) {
    dir=-1;
    if (hspd &gt; -spd){
        hspd -= fric;
    } else {
        hspd = -spd;
    }
}

if (rock==true) {
    hspd = 0;
    grav = 0.5;
    var inst = instance_place(x, y+1, obj_box)
    if (inst != noone) { 
        with (inst) {
            instance_destroy()
        }
    }
} else {
    grav = 1*mul;
}

// Check for not moving
if ((!kRight &amp;&amp; !kLeft) || (kRight &amp;&amp; kLeft)) {
    if (hspd !=0) {
        if (hspd &lt; 0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
}

//Shoot
if (kShoot &amp;&amp; global.ice==true &amp;&amp; move) {
    var inst;
    inst = instance_create(x+dir, y, obj_ice);
    with (inst) {
        hspd = (other.dir)*spd;
        image_xscale=other.dir
    }
    if (global.sound==true) {
        audio_play_sound(snd_ice, 10, false);
    }
}

//Offsets
var sprite_bbox_top = sprite_get_bbox_top(sprite_index) - sprite_get_yoffset(sprite_index);
var sprite_bbox_bottom = sprite_get_bbox_bottom(sprite_index) - sprite_get_yoffset(sprite_index);
var sprite_bbox_left = sprite_get_bbox_left(sprite_index) - sprite_get_xoffset(sprite_index);
var sprite_bbox_right = sprite_get_bbox_right(sprite_index) - sprite_get_xoffset(sprite_index);

//Horizontal collisions
x += hspd;

//Snap
if place_meeting(x+sign(hspd),y,obj_parent_solid) {
    var wall = instance_place(x+sign(hspd),y,obj_parent_solid);
    if hspd &gt; 0 { //right
        x = (wall.bbox_left-1)-sprite_bbox_right;
    } else if hspd &lt; 0 { //left
        x = (wall.bbox_right+1)-sprite_bbox_left;
    }
    hspd = 0;
}

if (global.animate==true) {
    draw_xscale = lerp(draw_xscale, 1, .1)
    draw_yscale = lerp(draw_yscale, 1, .1)
}

//Vertical collisions
y += vspd;

//Snap
if place_meeting(x,y+sign(vspd),obj_parent_solid) {
    var wall = instance_place(x,y+sign(vspd),obj_parent_solid);
    if vspd &gt; 0 { //bottom
        y = (wall.bbox_top-1)-sprite_bbox_bottom;
        var smk1 = instance_create(x,y+2,obj_smoke)
        with(smk1) {
            dir=1;
        }
        var smk2 = instance_create(x,y+2,obj_smoke)
        with(smk2) {
            dir=-1;
        }
    } else if vspd &lt; 0 { //top
            y = (wall.bbox_bottom+1)-sprite_bbox_top;
        }
    vspd = 0;
    if (global.animate==true) {
        draw_yscale=.85;
        draw_xscale=1.15;
    }

}

if (move==false) {
    hspd=0;
    fric=0;
    vspd=0;
    grav=0;
}

if (!move) {
    index_img+=0.1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy collision

if (place_meeting(x,y,obj_parent_enemy) &amp;&amp; move==true) {
    shake();
    if (global.sound==true &amp;&amp; !audio_is_playing(snd_hit)) {
        audio_play_sound(snd_hit, 1, false);
    }
    if (move!=false) {
        alarm[0]=room_speed;
        move=false
    }
} else {
    view_yview[0]=0
}

if (move==false) {
    global.hit=true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x&gt;room_width) &amp;&amp; (global.room_est!=noone) {
    room_goto(global.room_est)
    x=1
}
if (x&lt;0) &amp;&amp; (global.room_ovest!=noone) {
    room_goto(global.room_ovest)
    x=127
}
if (y&gt;room_height) &amp;&amp; (global.room_sud!=noone) {
    room_goto(global.room_sud)
    y=1
}
if (y&lt;0) &amp;&amp; (global.room_nord!=noone) {
    room_goto(global.room_nord)
    y=108
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (rock==true) {
    col = c_orange
} else {
    col = c_white
}

if (move==false) {
    //col = c_dkgray
    yscal = 1
    spr=spr_mage_death
    if index_img&gt;4 index_img=4
} else {
    yscal = 1
    spr=sprite_index
    index_img=0
}

draw_sprite_ext(spr,index_img,x,y,draw_xscale*dir,draw_yscale,0,col,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
